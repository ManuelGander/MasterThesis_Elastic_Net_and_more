import os
import sys
import logging
import argparse
from pathlib import Path
from typing import List, Union

import bin.config as config
from bin.TOPAS_drug_scoring import drug_scoring
from bin.TOPAS_kinase_scoring import kinase_scoring
from bin.TOPAS_protein_phosphorylation_scoring import protein_phospho_scoring
import bin.TOPAS_scoring_functions as scoring


# hacky way to get the package logger instead of just __main__ when running as a module
logger = logging.getLogger(__package__ + "." + Path(__file__).stem)


def psite_scoring(results_folder: Union[str, Path],
                  patient_regex: str,
                  data_types: List[str]):
    """Creates tables with drug, kinase and protein phosphorylation scores
    Requires that preprocessed_{data_type}.csv is generated by preprocess.py
    Requires that [phospho|full_proteome]_z.csv files are generated by metrics.py
    """
    logger.info('Running psite scoring module')
    if 'pp' not in data_types:
        logger.info(f'Psite scoring skipped - no phospho data available')
        return

    preprocessed_df = scoring.topas_score_preprocess(results_folder, patient_regex)
    drug_scoring(results_folder, preprocessed_df)
    kinase_scoring(results_folder, preprocessed_df)
    protein_phospho_scoring(results_folder, preprocessed_df)


if __name__ == '__main__':
    
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", required=True, default='/home/fhamood/PycharmProjects/WP3_Pipeline/wp3_sample_pipeline/config_patients.json',
                        help="Absolute path to configuration file.")
    args = parser.parse_args(sys.argv[1:])

    configs = config.load(args.config)
    
    psite_scoring(configs["results_folder"], configs["patient_regex"], configs["data_types"])
