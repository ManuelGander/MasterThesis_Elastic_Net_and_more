import os.path
import sys
import re
import json
import math
import logging

import numpy as np
import pandas as pd
from pathlib import Path
from typing import Tuple, List, Dict, Union
from job_pool import JobPool

import bin.utils as utils
import bin.metrics as metrics
import bin.clinical_process as clinical_process
import bin.clinical_tools as clinical_tools
import bin.basket_scoring as basket_scoring
import bin.TOPAS_kinase_scoring as kinase_scoring
import bin.TOPAS_protein_phosphorylation_scoring as protein_phoshorylation_scoring

logger = logging.getLogger(__name__)


def create_report(results_folder: Union[str, Path],
                  sample_annotation: Union[str, Path],
                  patient_regex: str,
                  debug: bool,
                  samples_for_report: str,
                  drug_list_file: Union[str, Path],
                  data_types: List[str]) -> None:
    """Creates an Excel report for each sample
    Requires that annot_{data_type}.csv is generated by clinical_process.py
    Requires that [phospho|full_proteome]_[z|rank|p|fc].csv files are generated by metrics.py
    # should require that kinase and phospho scoring files are generated ? or should it be run from here
    kinase_scores.tsv
    protein_scores.tsv
    """
    logger.info('Running report creation module')

    # TODO: add a check that batch selected exists in data

    # Run basket scoring again
    # 3) add occurrence of wp2 scores to reports
    # 4) do we want sub baskets files in a folder?

    if samples_for_report in ['all', 'ALL', '']:
        samples_list = []
    else:
        try:
            samples_for_report = str(samples_for_report)
        except ValueError:
            print('Input not of type int or string')
        samples_list = samples_for_report

    # Read basket scoring dictionary from json
    basket_annot_dicts = get_basket_annot_dicts(results_folder, data_types)

    sample_annotation_df = pd.read_csv(os.path.join(results_folder, 'sample_annot_filtered.csv'))
    # sample_annotation_df = pd.read_csv(sample_annotation)
    # sample_annotation_df = sample_annotation_df.loc[sample_annotation_df['QC'] == 'passed', :]

    # Read scoring files and calculate extra annotation metrics
    basket_scores, subbasket_scores, kinase_scores, protein_scores = read_and_compute_scores(results_folder, patient_regex)

    # TODO: in the calculating rank, z-score etc add occurrence to the data

    # Calculate in batch basket scores
    batch_basket_scores, batch_subbasket_scores, batch_kinase_scores, batch_protein_scores, batch_phospho_scores = dict(), dict(), dict(), dict(), dict()
    batch_basket_scores['measures'] = compute_in_batch_scores(basket_scores['scores'], sample_annotation_df, patient_regex)
    batch_subbasket_scores['measures'] = compute_in_batch_scores(subbasket_scores['scores'], sample_annotation_df, patient_regex)
    batch_kinase_scores['measures'] = compute_in_batch_scores(kinase_scores['scores'], sample_annotation_df, patient_regex)
    batch_protein_scores['measures'] = compute_in_batch_scores(protein_scores['scores'], sample_annotation_df, patient_regex)

    # Read and prepare patient intensity data
    measure_dfs = dict()
    for data_type in data_types:
        measures = metrics.read_measures(results_folder, data_type)
        annot, _ = clinical_process.read_annotation_files(results_folder, debug, data_type)
        measure_dfs[data_type] = {'metrics': measures, 'metadata': annot}
        if len(samples_list) == 0:
            samples_for_report = measures['z-score'].filter(regex=r'zscore').columns.tolist()
        else:
            samples_for_report = get_samples_for_report(sample_annotation_df, samples_list)
    batch_phospho_scores['measures'] = compute_in_batch_scores(measure_dfs['pp']['metrics']['z-score'], sample_annotation_df, patient_regex)

    biomarkers = pd.read_csv(os.path.join(results_folder, 'biomarker_scores.tsv'), sep='\t', index_col='Gene names')

    samples_for_report.reverse()

    write_patient_reports(results_folder, measure_dfs, basket_scores, batch_basket_scores, subbasket_scores,
                          batch_subbasket_scores, kinase_scores, batch_kinase_scores, protein_scores, batch_protein_scores,
                          batch_phospho_scores, samples_for_report, basket_annot_dicts, sample_annotation_df, biomarkers)


def get_basket_annot_dicts(results_folder, data_types):
    basket_annot_dicts = {}
    for data_type in data_types + ['fp_with_ref', 'pp_with_ref']:
        # try to loop through data types and when a fitting dict is found load it
        if os.path.exists(os.path.join(results_folder, f'basket_annot_dict_{data_type}.json')):
            f = open(os.path.join(results_folder, f'basket_annot_dict_{data_type}.json'))
            if 'fp' in data_type:
                data_type = 'fp'
            else:
                data_type = 'pp'
            basket_annot_dicts[data_type] = json.load(f)
    return basket_annot_dicts


def compute_in_batch_scores(basket_scores: pd.DataFrame, sample_annotation_df: pd.DataFrame, patient_regex) -> Dict:
    # basket_scores = basket_scores.filter(regex=patient_regex)
    basket_scores_copy = basket_scores.copy()  # copy necessary to not alter original df
    if 'zscore' in basket_scores_copy.columns[1]:
        basket_scores_copy.columns = basket_scores_copy.columns.str.replace('zscore_', '')
    sample_batch_dict = dict(zip(sample_annotation_df['Sample name'].values, sample_annotation_df['Batch Name'].values))
    samples_as_baskets = np.array([sample_batch_dict[sample] for sample in basket_scores_copy.columns])

    all_measures = dict()
    for batch in set(samples_as_baskets):
        batch_mask = samples_as_baskets == batch
        all_measures[batch] = metrics.compute_measures(basket_scores_copy.loc[:, batch_mask], patient_regex)
    return all_measures


def new_compute_in_batch_scores(basket_scores: pd.DataFrame, sample_annotation_df: pd.DataFrame, patient_regex) -> Dict:
    common_samples = [x for x in sample_annotation_df['Sample name'].tolist() if x in basket_scores.columns.tolist() ]
    common_sample_annotation_df = sample_annotation_df[sample_annotation_df['Sample name'].isin(common_samples)]
    common_sample_annotation_df = common_sample_annotation_df[['Sample name','Batch Name']]

    all_batches = common_sample_annotation_df['Batch Name'].unique().tolist()
    all_measures = dict()
    for batch in all_batches:
        batch_mask = common_sample_annotation_df['Sample name'][common_sample_annotation_df['Batch Name'] == batch].tolist()
        all_measures[batch] = metrics.compute_measures(basket_scores.loc[:, batch_mask], patient_regex)
    return all_measures


def read_and_compute_scores(results_folder: Union[str, Path], patient_regex) -> Tuple:
    # TODO: optimize reading and filtering of score files
    basket_scores, subbasket_scores, kinase_scores, protein_scores = dict(), dict(), dict(), dict()
    basket_scores['scores'] = basket_scoring.read_basket_scores(results_folder).transpose()
    basket_scores['scores'] = basket_scores['scores'].loc[:, ~basket_scores['scores'].columns.str.startswith('target')]
    subbasket_scores['scores'] = basket_scoring.read_sub_basket_scores(results_folder)
    subbasket_scores['scores'] = subbasket_scores['scores'].loc[:, ~subbasket_scores['scores'].columns.str.startswith('target')]
    kinase_scores['scores'] = kinase_scoring.read_kinase_scoring(results_folder)
    kinase_scores['targets'] = kinase_scores['scores'].filter(regex=r'target')
    kinase_scores['scores'] = kinase_scores['scores'].loc[:, ~kinase_scores['scores'].columns.str.startswith('target')]
    kinase_scores['scores'] = kinase_scores['scores'].filter(regex=patient_regex)
    protein_scores['scores'] = protein_phoshorylation_scoring.read_protein_scoring(results_folder, patient_regex)
    protein_scores['scores'] = protein_scores['scores'].loc[:, ~protein_scores['scores'].columns.str.startswith('target')]

    all_scores = [basket_scores, subbasket_scores, kinase_scores, protein_scores]
    for score_dict in all_scores:
        # score_dict['scores'] = score_dict['scores'].filter(regex=patient_regex)
        if 'No. of total targets' in score_dict['scores'].columns:
            score_dict['scores'] = score_dict['scores'].drop(columns='No. of total targets')
    all_scores_copy = [basket_scores['scores'].copy(), subbasket_scores['scores'].copy(), kinase_scores['scores'].copy(),
                       protein_scores['scores'].copy()]

    for i, score_dict in enumerate(all_scores):
        score_dict['measures'] = metrics.compute_measures(score_dict['scores'], patient_regex)
        score_dict['significance'] = all_scores_copy[i].apply(assign_significance_score, axis=1)
    return basket_scores, subbasket_scores, kinase_scores, protein_scores


def get_samples_for_report(sample_annotation_df: pd.DataFrame, samples_for_report):
    samples_for_report = []
    # TODO: add test for this ? to crash with a message at least
    if ',' in samples_for_report or ';' in samples_for_report:
        samples_for_report = utils.split_str_list(samples_for_report)
    if type(samples_for_report) == list:
        samples_for_report = sample_annotation_df.loc[
            sample_annotation_df['Batch Name'].isin(samples_for_report), 'Sample name'].values.tolist()
    else:
        if not pd.Series(sample_annotation_df['Batch Name'] == int(samples_for_report)).any():
            logger.warning('Samples_for_report parameter was not found as batch in cohort. All samples reports will be printed.')
            return sample_annotation_df.loc[:, 'Sample name'].values.tolist()
        samples_for_report = sample_annotation_df.loc[
            sample_annotation_df['Batch Name'] == samples_for_report, 'Sample name'].values.tolist()
    return samples_for_report


def write_patient_reports(results_folder: Union[str, Path],
                          measure_dfs,
                          basket_scores,
                          batch_basket_scores,
                          subbasket_scores,
                          batch_subbasket_scores,
                          kinase_scores,
                          batch_kinase_scores,
                          protein_scores,
                          batch_protein_scores,
                          batch_phospho_scores,
                          samples_for_report,
                          basket_annot_dicts: List[Union[Dict, None]],
                          sample_annotation_df,
                          biomarkers: pd.DataFrame):
    report_folder = os.path.join(results_folder, 'Reports')
    os.makedirs(report_folder, mode=0o700, exist_ok=True)

    readme = pd.read_json(os.path.join(os.getcwd(), 'report_README.json'))
    readme = readme.set_index('Column')

    # Create reports (~13 seconds per patient report, or ~11 minutes in total on 4 cores for 192 patients)
    logger.info('Queueing reports for multiprocessing')
    processingPool = JobPool(processes=6)
    for i, patient in enumerate(samples_for_report):
        if 'zscore' in patient:
            patient = patient.split('zscore_')[1]
        batch = sample_annotation_df.loc[sample_annotation_df['Sample name'] == patient, 'Batch Name'].values[0]
        report_file = os.path.join(report_folder, f'{patient}_proteomics_results.xlsx')
        processingPool.applyAsync(create_patient_report, [report_file, patient, measure_dfs, basket_scores, batch_basket_scores,
                                                          subbasket_scores, batch_subbasket_scores, kinase_scores, batch_kinase_scores,
                                                          protein_scores, batch_protein_scores, batch_phospho_scores, basket_annot_dicts, batch, biomarkers])
        # create_patient_report(report_file, patient, measure_dfs, basket_scores, batch_basket_scores, subbasket_scores,
        #                      batch_subbasket_scores, kinase_scores, batch_kinase_scores, protein_scores, batch_protein_scores,
        #                      batch_phospho_scores, basket_annot_dicts, batch, biomarkers)  # useful for debugging

    processingPool.checkPool(printProgressEvery=1)


def create_patient_report(report_file: Union[str, Path],
                          patient: str,
                          metrics_dfs: Dict[str, Dict[str, pd.DataFrame]],
                          basket_scores: Dict[str, Dict[str, pd.DataFrame]],
                          batch_basket_score: Dict[str, Dict[str, pd.DataFrame]],
                          subbasket_scores: Dict[str, Dict[str, pd.DataFrame]],
                          batch_subbasket_scores: Dict[str, Dict[str, pd.DataFrame]],
                          kinase_scores: Dict[str, Dict[str, pd.DataFrame]],
                          batch_kinase_scores: Dict[str, Dict[str, pd.DataFrame]],
                          protein_scores: Dict[str, Dict[str, pd.DataFrame]],
                          batch_protein_scores: Dict[str, Dict[str, pd.DataFrame]],
                          batch_phospho_scores: Dict[str, Dict[str, pd.DataFrame]],
                          basket_annot_dicts: List[Union[Dict[str, Dict], None]],
                          batch: int,
                          biomarkers: pd.DataFrame) -> None:

    # save patient column from each metric measure dataframe to patient dict for both data types
    patient_data = {}
    for data_type, dfs in metrics_dfs.items():
        ranked, fold_change, z_scores, p_values = dfs['metrics'].values()
        patient_data[data_type] = pd.concat([ranked.loc[:, 'rank_' + patient],
                                             ranked.loc[:, 'rank_max'],
                                             fold_change.loc[:, 'fc_' + patient],
                                             z_scores.loc[:, 'zscore_' + patient],
                                             p_values.loc[:, 'pvalue_zscore_' + patient]], axis=1)
        patient_data[data_type].columns = ['Rank', 'Occurrence', 'FC', 'Z-score', 'P-value']
    # sub basket - do we want to keep sarcoma subtype as annotation?

    patient_data = add_scores_to_patient_data(patient_data, patient, basket_scores, batch_basket_score, subbasket_scores,
                                              batch_subbasket_scores, kinase_scores, batch_kinase_scores, protein_scores,
                                              batch_protein_scores, batch_phospho_scores, batch)

    annotation_columns, annotation_columns_baskets = dict(), dict()
    annotation_columns['pp'] = {patient: 'Intensity',
                                f'Identification metadata {patient}': 'Identification metadata',
                                'basket': 'Basket',
                                'sub_basket': 'Subbasket',
                                'Site positions identified (MQ)': 'Site positions (MQ identified - PSP)',
                                'Site positions': 'Site positions (PSP)',
                                'PSP Kinases': 'Kinases (PSP)',
                                'PSP_ON_FUNCTION': 'Effects on Modified Protein (PSP)',
                                'PSP_ON_PROCESS': 'Effects on Biological Processes (PSP)',
                                'PSP_ON_PROT_INTERACT': 'Induce Interaction with protein (PSP)',
                                'PSP_ON_OTHER_INTERACT': 'Induce Interaction with other (PSP)',
                                'PSP_NOTES': 'PSP NOTES',
                                'PSP_LT_LIT': 'Low throughput studies (PSP)',
                                'PSP_MS_LIT': 'High throughput studies (PSP)',
                                'PSP_MS_CST': 'CST studies (PSP)',
                                }
    annotation_columns['fp'] = {f'Identification metadata {patient}': 'Identification metadata',
                                patient: 'Intensity',
                                'basket': 'Basket',
                                'sub_basket': 'Subbasket'}
    annotation_columns_baskets = {'rank_' + patient: 'Rank',
                                  'zscore_' + patient: 'Z-score',
                                  'occurrence': 'Occurrence'}

    # TODO: add also number of peptides for kinase? here look into wp2 scoring

    # Create a Pandas Excel writer using XlsxWriter as the engine
    with pd.ExcelWriter(report_file, engine='xlsxwriter') as writer:
        # Create summary with basket significance scores as overview
        create_summary_worksheet('Summary', patient_data['Basket_significance'], writer)

        # Create basket worksheets
        basket_types = ['Basket', 'Subbasket']
        for basket in basket_types:
            create_basket_worksheet(basket, patient_data, writer, basket,
                                    annotation_columns_baskets)


        # # Create proteome worksheets
        for data_type, dfs in metrics_dfs.items():
            data_type_long = 'Global proteome'
            create_worksheet = create_fp_worksheet
            if data_type == 'pp':
                data_type_long = 'Phospho proteome'
                create_worksheet = create_pp_worksheet
            else:
                create_biomarker_worksheet(biomarkers, patient, dfs['metadata'], writer)
            create_worksheet(data_type_long, dfs['metadata'], patient_data, writer, annotation_columns[data_type])

        # Create Kinase and Protein phosphorylation scoring worksheets
        create_wp2_worksheet('Kinase', patient_data, writer, annotation_columns_baskets, basket_annot_dicts['fp'])
        create_wp2_worksheet('Protein', patient_data, writer, annotation_columns_baskets, basket_annot_dicts['pp'])


def add_scores_to_patient_data(patient_data: Dict[str, Dict[str, pd.DataFrame]],
                               patient: str,
                               basket_scores: Dict[str, Dict[str, pd.DataFrame]],
                               batch_basket_scores: Dict[str, Dict[str, pd.DataFrame]],
                               subbasket_scores: Dict[str, Dict[str, pd.DataFrame]],
                               batch_subbasket_scores: Dict[str, Dict[str, pd.DataFrame]],
                               kinase_scores: Dict[str, Dict[str, pd.DataFrame]],
                               batch_kinase_scores: Dict[str, Dict[str, pd.DataFrame]],
                               protein_scores: Dict[str, Dict[str, pd.DataFrame]],
                               batch_protein_scores: Dict[str, Dict[str, pd.DataFrame]],
                               batch_phospho_scores: Dict[str, Dict[str, pd.DataFrame]],
                               batch: int) -> Dict[str, pd.DataFrame]:
    basket_rank, _, basket_zscore, _, basket_occurrence = basket_scores['measures'].values()
    batch_basket_rank, _, batch_basket_zscore, _, batch_basket_occurrence = batch_basket_scores['measures'][batch].values()
    subbasket_rank, _, subbasket_zscore, _, subbasket_occurrence = subbasket_scores['measures'].values()
    batch_subbasket_rank, _, batch_subbasket_zscore, _, batch_subbasket_occurrence = batch_subbasket_scores['measures'][
        batch].values()
    kinase_rank, _, kinase_zscore, _, kinase_occurrence = kinase_scores['measures'].values()
    batch_kinase_rank, _, batch_kinase_zscore, _, batch_kinase_occurrence = batch_kinase_scores['measures'][batch].values()
    protein_rank, _, protein_zscore, _, protein_occurrence = protein_scores['measures'].values()
    batch_protein_rank, _, batch_protein_zscore, _, batch_protein_occurrence = batch_protein_scores['measures'][batch].values()
    batch_phospho_rank, _, batch_phospho_zscore, _, batch_phospho_occurrence = batch_phospho_scores['measures'][batch].values()

    scoring_types = ['Basket', 'Batch_Basket', 'Subbasket', 'Batch_Subbasket', 'Kinase', 'Batch_Kinase', 'Protein',
                     'Batch_Protein', 'Batch_Phospho']
    scoring_ranks = [basket_rank, batch_basket_rank, subbasket_rank, batch_subbasket_rank, kinase_rank, batch_kinase_rank,
                     protein_rank, batch_protein_rank, batch_phospho_rank]
    scoring_zscores = [basket_zscore, batch_basket_zscore, subbasket_zscore, batch_subbasket_zscore, kinase_zscore,
                       batch_kinase_zscore, protein_zscore, batch_protein_zscore, batch_phospho_zscore]
    scoring_occurrences = [basket_occurrence, batch_basket_occurrence, subbasket_occurrence, batch_subbasket_occurrence,
                           kinase_occurrence, batch_kinase_occurrence, protein_occurrence, batch_protein_occurrence,
                           batch_phospho_occurrence]
    scoring_dfs = [basket_scores, basket_scores, subbasket_scores, subbasket_scores, kinase_scores, kinase_scores, protein_scores,
                   protein_scores, batch_phospho_scores]

    for i, scoring in enumerate(scoring_types):
        index_name = scoring
        if scoring == 'Protein':
            index_name = 'Protein phosphorylation'
        if 'scores' in scoring_dfs[i].keys():  # Phospho data does not have scores dict
            patient_data[scoring] = scoring_dfs[i]['scores'].loc[:, patient].rename(index_name + ' score')
            patient_data[scoring].index.name = scoring
        else:
            pass
        if scoring == 'Kinase':
            patient_data[scoring] = pd.concat(
                [patient_data[scoring], kinase_scores['targets'].loc[:, 'targets_' + patient].rename(
                    'Targets')], axis=1)
        patient_data[scoring + '_measures'] = pd.concat([scoring_ranks[i].loc[:, 'rank_' + patient],
                                                         scoring_zscores[i].loc[:, 'zscore_' + patient],
                                                         scoring_occurrences[i]], axis=1)
        patient_data[scoring + '_measures'].index.name = scoring
        if scoring != 'Batch_Phospho':
            patient_data[scoring + '_significance'] = scoring_dfs[i]['significance'].loc[:, patient].rename('Significance')
            patient_data[scoring + '_significance'].index.name = scoring
    return patient_data


def create_summary_worksheet(sheet_name: str,
                             df: pd.DataFrame,
                             writer: pd.ExcelWriter) -> None:
    worksheet, workbook = create_workbook(df.sort_values(), writer, sheet_name)
    worksheet.set_column('A:A', 20)
    worksheet.set_column('B:B', 20)


def create_fp_worksheet(sheet_name: str,
                        fp: pd.DataFrame,
                        measures: Dict[str, Dict],
                        writer: pd.ExcelWriter,
                        fp_annotation_columns: Dict[str, str]) -> None:
    """
    Describe
    :param sheet_name:
    :param fp: patients intensities plus metadata and baskets annot
    :param df: measures fc, rank, z-score etc
    :param writer:
    :param fp_annotation_columns:

    """
    df = measures['fp']

    # add annotation to full proteome
    annotations = fp[fp_annotation_columns.keys()]

    # sort annotation
    annotations = annotations.reindex(fp_annotation_columns.keys(), axis=1)

    # rename annotation
    annotations = annotations.rename(fp_annotation_columns, axis='columns')

    df = pd.concat([df, annotations], axis=1)

    # Get the xlsxwriter workbook and worksheet objects
    worksheet, workbook = create_workbook(df, writer, sheet_name)

    # Add cell formats
    format_no_dec = workbook.add_format({'num_format': '#,##0'})
    format_two_dec = workbook.add_format({'num_format': '#,##0.00'})
    format_p_value = workbook.add_format({'num_format': "0.00E+00"})
    worksheet.set_column('A:A', 15)  # gene name
    worksheet.set_column('B:C', 12, format_no_dec)  # rank and occurrence
    worksheet.set_column('D:E', 12, format_two_dec)  # fold change and z-score
    worksheet.set_column('F:F', 12, format_p_value)  # p-value
    worksheet.set_column('G:G', 15)  # ident metadata num of peptides
    worksheet.set_column('H:H', 12, format_two_dec)  # intensity
    worksheet.set_column('I:J', 15)  # basket and subbasket


def create_pp_worksheet(sheet_name: str,
                        pp: pd.DataFrame,
                        measures: Dict[str, Dict],
                        writer: pd.ExcelWriter,
                        pp_annotation_columns: Dict[str, str]) -> None:

    df = measures['pp']
    phospho_in_batch = measures['Batch_Phospho_measures']

    # add annotation to phosphoproteome
    annotations = pp[pp_annotation_columns.keys()]

    # sort annotation columns
    annotations = annotations.reindex(pp_annotation_columns.keys(), axis=1)

    # rename annotation columns
    annotations = annotations.rename(pp_annotation_columns, axis='columns')

    phospho_in_batch = phospho_in_batch.loc[:, phospho_in_batch.columns.str.contains('zscore')]
    phospho_in_batch.columns = ['Batch_Rank']

    df = pd.concat([df, phospho_in_batch, annotations], axis=1)
    df = df.reset_index().set_index('Modified sequence')

    # move Gene names and Proteins annot to start of df
    locations, col_names = [0, 10], ['Gene names', 'Proteins']
    df = move_columns_to_start(df, locations, col_names)

    # Get the xlsxwriter workbook and worksheet objects
    worksheet, workbook = create_workbook(df, writer, sheet_name)

    # Add cell formats
    format_no_dec = workbook.add_format({'num_format': '#,##0'})
    format_two_dec = workbook.add_format({'num_format': '#,##0.00'})
    format_p_value = workbook.add_format({'num_format': "0.00E+00"})
    worksheet.set_column('A:A', 22)  # modified sequence
    worksheet.set_column('B:B', 15)  # gene names
    worksheet.set_column('C:D', 15, format_no_dec)  # Rank and occurrence
    worksheet.set_column('E:F', 12, format_two_dec)  # Fold change and z-score
    worksheet.set_column('G:G', 12, format_p_value)  # p-value
    worksheet.set_column('H:H', 12, format_no_dec)  # Z-score rank inside batch
    worksheet.set_column('I:I', 12, format_two_dec)  # intensity
    worksheet.set_column('J:M', 13)  # ident metadata imputed, basket, proteins, subbasket
    worksheet.set_column('N:X', 13)  # PSP annotations
    worksheet.set_column('Y:Y', 20)  # PSP URL


def create_wp2_worksheet(sheet_name: str,
                         dfs: Dict[str, pd.DataFrame],
                         writer: pd.ExcelWriter,
                         extra_annotation_columns: Dict[str, str],
                         basket_annot_dict: Union[Dict[str, Dict], None],
                         basket_subset=None) -> None:
    measures = dfs[sheet_name + '_measures'][extra_annotation_columns.keys()]
    batch_measures = dfs['Batch_' + sheet_name + '_measures'][extra_annotation_columns.keys()]
    significance_score = dfs[sheet_name + '_significance']
    if sheet_name == 'Kinase':
        significance_score = significance_score.reset_index(level='No. of total targets', drop=True)

    # TODO: test with no annot_dict

    if basket_annot_dict is not None:
        index_values = sheet_name
        for i, basket_type in enumerate(['basket', 'sub_basket']):
            # use dictionary to assign basket annotation - NB! has to be dataframe
            if sheet_name == 'Kinase':
                index_values = 'PSP Kinases'

            basket_df = measures.index.get_level_values(index_values).to_frame()
            basket_df[basket_type] = basket_df.apply(
                clinical_tools.map_identifier_list_to_baskets, annot_dict=basket_annot_dict,
                basket_type=basket_type, with_weights=False, axis=1)

            basket_df.index = measures.index
            if sheet_name == 'Kinase':
                basket_df = basket_df.drop(['PSP Kinases'], axis=1)
            else:
                basket_df = basket_df.drop('Protein', axis=1)
            measures = pd.merge(left=measures, right=basket_df, on=index_values)
            # extend subbasket name to include basket
            if basket_type == 'sub_basket':
                measures[basket_type] = measures.apply(clinical_process.merge_baskets_with_subbaskets, axis=1)
        # Have to loop through again to not remove duplicate baskets before merge basket with subbasket step
        for basket_type in ['basket', 'sub_basket']:
            # remove duplicated basket annotation
            measures[basket_type] = measures[basket_type].apply(clinical_process.get_unique_baskets)

    # rename the metric columns and baskets
    measures = measures.rename(extra_annotation_columns, axis='columns')
    measures = measures.rename({'basket': 'Basket', 'sub_basket': 'Subbasket'}, axis='columns')
    batch_measures = batch_measures.rename(extra_annotation_columns, axis='columns') \
        .add_prefix('Batch_').drop('Batch_Z-score', axis=1)

    # combine with patient data and reorder columns
    if sheet_name == 'Protein':
        wp2_score = dfs[sheet_name]
        sheet_name = 'Protein' + ' phosphorylation'
        df_subset = [f'{sheet_name} score', 'Rank', 'Occurrence', 'Z-score', 'Significance', 'Basket', 'Subbasket', 'Batch_Rank']
    else:
        wp2_score = dfs[sheet_name].reset_index(level='No. of total targets')
        batch_measures = batch_measures.reset_index(level='No. of total targets')
        batch_measures = batch_measures.drop('No. of total targets', axis=1)
        df_subset = ['No. of total targets', f'{sheet_name} score', 'Targets', 'Rank', 'Occurrence', 'Z-score', 'Significance',
                     'Basket', 'Subbasket', 'Batch_Rank']
    df = pd.concat([wp2_score, measures, significance_score, batch_measures], axis=1)

    if basket_annot_dict is not None:
        df = df[df_subset]

    # Get the xlsxwriter workbook and worksheet objects
    worksheet, workbook = create_workbook(df, writer, sheet_name)

    # Add cell formats
    format_no_dec = workbook.add_format({'num_format': '#,##0'})
    format_two_dec = workbook.add_format({'num_format': '#,##0.00'})

    if sheet_name == 'Kinase':
        worksheet.set_column('A:A', 20)  # Kinase
        worksheet.set_column('B:B', 17, format_no_dec)  # targets of cohort
        worksheet.set_column('C:C', 14, format_two_dec)  # score
        worksheet.set_column('D:F', 12, format_no_dec)  # targets in sample + rank + occurrence
        worksheet.set_column('G:G', 14, format_two_dec)  # z-score
        worksheet.set_column('H:H', 15, format_no_dec)  # significance
        worksheet.set_column('I:J', 15, format_no_dec)  # basket+subbasket
        worksheet.set_column('K:K', 15, format_no_dec)  # rank in batch

    if sheet_name == 'Protein phosphorylation':
        worksheet.set_column('A:A', 20)  # basket
        worksheet.set_column('B:B', 16, format_two_dec)  # score
        worksheet.set_column('C:D', 12, format_no_dec)  # rank + occurrence
        worksheet.set_column('E:E', 14, format_two_dec)  # z-score
        worksheet.set_column('F:F', 15, format_no_dec)  # significance
        worksheet.set_column('G:H', 15, format_no_dec)  # basket+subbasket
        worksheet.set_column('I:I', 15, format_no_dec)  # rank in batch


def get_significance_counts(significance_score, dfs):
    for i, basket in enumerate(significance_score.index):
        if i == 0:
            dfs['Subbasket' + '_significance'] = dfs['Subbasket' + '_significance'].replace(np.nan, 0)
            all_counts_df = pd.DataFrame(index=[0.0, 1.0, 2.0, 3.0, 4.0])
        basket_index = dfs['Subbasket' + '_significance'].index.to_series().str.startswith(basket)

        basket_sign_counts = dfs['Subbasket' + '_significance'].loc[basket_index].value_counts().sort_values().rename(basket)
        all_counts_df = pd.concat([all_counts_df, basket_sign_counts], axis=1, join='outer')

    column_labels = ['Sign. score 0 in subbaskets', 'Sign. score 1 in subbaskets', 'Sign. score 2 in subbaskets',
                     'Sign. score 3 in subbaskets', 'Sign. score 4 in subbaskets']
    all_counts_df.index = column_labels
    column_labels.append(column_labels.pop(0))
    all_counts_df = all_counts_df.transpose()
    all_counts_df = all_counts_df[column_labels]
    return all_counts_df


def create_basket_worksheet(sheet_name: str,
                            dfs: Dict[str, pd.DataFrame],
                            writer: pd.ExcelWriter,
                            basket_column: str,
                            extra_annotation_columns: Dict[str, str],
                            basket_subset=None) -> None:
    measures = dfs[sheet_name + '_measures'][extra_annotation_columns.keys()]
    batch_measures = dfs['Batch_' + sheet_name + '_measures'][extra_annotation_columns.keys()]
    significance_score = dfs[sheet_name + '_significance']

    if sheet_name == 'Basket':
        significance_counts_df = get_significance_counts(significance_score, dfs)

    # rename the metric columns
    measures = measures.rename(extra_annotation_columns, axis='columns')
    batch_measures = batch_measures.rename(extra_annotation_columns, axis='columns') \
        .add_prefix('Batch_').drop('Batch_Z-score', axis=1)

    # Prepare score df by splitting basket name into basket, subbasket and level of score
    if sheet_name == 'Subbasket':
        dfs[sheet_name] = pd.DataFrame({'Basket': dfs[sheet_name].index.to_series().apply(lambda x: x.split(' - ')[0]),
                                        'Subbasket': dfs[sheet_name].index.to_series().apply(lambda x: x.split(' - ')[1]),
                                        'Level': dfs[sheet_name].index.to_series().apply(lambda x: x.split(' - ')[2]),
                                        'Basket score': dfs[sheet_name].values})
        data_to_concatenate = [dfs[sheet_name], measures, significance_score, batch_measures]
    else:
        data_to_concatenate = [dfs[sheet_name], measures, significance_score, batch_measures, significance_counts_df]

    # combine with patient data
    df = pd.concat(data_to_concatenate, axis=1)
    use_index = True
    if sheet_name == 'Subbasket':
        use_index = False

    # Get the xlsxwriter workbook and worksheet objects
    worksheet, workbook = create_workbook(df, writer, sheet_name, use_index)

    # Add cell formats
    format_no_dec = workbook.add_format({'num_format': '#,##0'})
    format_two_dec = workbook.add_format({'num_format': '#,##0.00'})
    if basket_column == 'Basket':
        worksheet.set_column('A:A', 20)  # basket
        worksheet.set_column('B:B', 15, format_two_dec)  # basket score
        worksheet.set_column('C:C', 12, format_no_dec)  # rank
        worksheet.set_column('D:D', 12, format_two_dec)  # z-score
        worksheet.set_column('E:E', 15, format_no_dec)  # significance
        worksheet.set_column('F:F', 15, format_no_dec)  # rank in batch
        worksheet.set_column('G:K', 22, format_no_dec)  # no. sign score in sub baskets
    else:
        worksheet.set_column('A:B', 20)  # basket + subbasket
        worksheet.set_column('C:C', 25)  # level
        worksheet.set_column('D:D', 15, format_two_dec)  # score
        worksheet.set_column('E:E', 12, format_no_dec)  # rank
        worksheet.set_column('F:F', 12, format_two_dec)  # z-score
        worksheet.set_column('G:G', 15, format_no_dec)  # significance
        worksheet.set_column('H:H', 15, format_no_dec)  # rank in batch


def create_biomarker_worksheet(df: pd.DataFrame,
                               patient: str,
                               fp,
                               writer):
    baskets_dict = dict(zip(fp.index, fp['basket']))
    subbaskets_dict = dict(zip(fp.index, fp['sub_basket']))

    df = df.loc[:, patient]
    df = df.rename('Z-score')
    df = pd.DataFrame(df.dropna())
    df['Basket'] = df.index.map(baskets_dict)
    df['Subbasket'] = df.index.map(subbaskets_dict)

    df = df.sort_values(by='Z-score', ascending=False, key=lambda x: x.abs())
    worksheet, workbook = create_workbook(df, writer, 'Biomarkers')
    format_upregulated = workbook.add_format({'bg_color': '#f4cccc', 'bold': True, 'font_color': '#cc0000'})
    format_downregulated = workbook.add_format({'bg_color': '#9fc5e8', 'bold': True, 'font_color': '#16537e'})
    format_two_dec = workbook.add_format({'num_format': '#,##0.00'})
    worksheet.set_column('A:A', 20)
    worksheet.set_column('B:B', 15, format_two_dec)
    worksheet.set_column('C:D', 50)
    worksheet.conditional_format(1, 1, len(df), 1, {"type": "cell", 'criteria': '<', 'value': -2, 'format': format_downregulated})
    worksheet.conditional_format(1, 1, len(df), 1, {"type": "cell", 'criteria': '>', 'value': 2, 'format': format_upregulated})


def create_workbook(patient_data, writer, sheet_name, use_index: bool = True):
    patient_data.to_excel(writer, sheet_name=sheet_name, index=use_index)  # this is the slow part...
    workbook, worksheet = writer.book, writer.sheets[sheet_name]
    return worksheet, workbook


def move_columns_to_start(df, locations, col_names):
    df_new = df.drop(labels=col_names, axis=1)
    for location, col_name in zip(locations, col_names):
        df_new.insert(location, col_name, df[col_name])
    df = df_new
    return df


def assign_significance_score(col: pd.Series):
    score_percentage_thresholds = [0.05, 0.10, 0.20, 0.90]
    sorted_col = col.sort_values(ascending=False)
    for i, threshold in enumerate(score_percentage_thresholds):
        previous_threshold_percentage = math.ceil(col.size * score_percentage_thresholds[i - 1])
        top_threshold_percentage = math.ceil(col.size * threshold)
        if i == 0:
            col.loc[sorted_col.iloc[:top_threshold_percentage].index] = i + 1
        if i == 3:
            col.loc[sorted_col.iloc[top_threshold_percentage:].index] = i + 1
            col.loc[sorted_col.iloc[previous_threshold_percentage:top_threshold_percentage].index] = np.nan
        else:
            col.loc[sorted_col.iloc[previous_threshold_percentage:top_threshold_percentage].index] = i + 1
    return col


if __name__ == '__main__':
    import argparse

    from . import config

    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", required=True,
                        help="Absolute path to configuration file.")
    args = parser.parse_args(sys.argv[1:])

    configs = config.load(args.config)

    create_report(configs["results_folder"], configs["sample_annotation"], configs["patient_regex"], configs["preprocessing"]["debug"], **configs["report"],
                  data_types=configs["data_types"])
